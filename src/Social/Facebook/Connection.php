<?php
/**
 * Facebook Graph API connection.
 * 
 * @license MIT
 * @copyright 2012 Jasny
 */

/** */
namespace Social\Facebook;

use Social\Connection as Base;
use Social\Exception;

/**
 * Facebook Graph API connection.
 * @see http://developers.facebook.com/docs/reference/api/
 */
class Connection extends Base
{
    /**
     * Facebook authentication URL
     */
    const authURL = "https://www.facebook.com/dialog/oauth";

    /**
     * Facebook Open Graph API URL
     */
    const graphURL = "https://graph.facebook.com/";
    
    
    /**
     * @var string
     */
    protected $appId;

    /**
     * @var string
     */
    protected $apiSecret;

    /**
     * @var string
     */
    protected $accessToken;

    
    /**
     * Class constructor.
     * 
     * @param string $appId
     * @param string $secret
     */
    public function __construct($appId, $apiSecret, $accessToken=null)
    {
        $this->appId = $appId;
        $this->apiSecret = $apiSecret;
        $this->accessToken = $accessToken;
    }
    
    /**
     * Get the application ID.
     * 
     * @return string
     */
    public function getAppId()
    {
        return $this->appId;
    }
    
    /**
     * Set the access token.
     * 
     * @param string $accessToken 
     */
    public function setAccessToken($accessToken)
    {
        if (isset($this->accessToken) && $this->accessToken != $accessToken) throw new Exception("Changing the access token is not allowed. Please create a new connection instead.");
        $this->accessToken = $accessToken;
    }
    
    /**
     * Get the access token.
     * 
     * @return string
     */
    public function getAccessToken()
    {
        return $this->accessToken;
    }
    
    
    /**
     * Get Facebook Open Graph API URL
     * 
     * @return string
     */
    protected function getBaseUrl()
    {
        return self::graphURL;
    }
    
    /**
     * Generate a unique value, used as 'state' for oauth.
     * 
     * @return string
     */
    protected function getUniqueState()
    {
        $ip = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['SERVER_ADDR'] : $_SERVER['REMOTE_ADDR'];
        return md5($ip . $this->apiSecret);
    }
    
    /**
     * Get authentication url.
     * 
     * For permssions @see http://developers.facebook.com/docs/authentication/permissions/
     * 
     * @param array  $scope        Permission list
     * @param string $redirectUrl
     * @return string
     */
    public function getAuthUrl($scope=null, $redirectUrl=null)
    {
        if (empty($redirectUrl)) {
            $redirectUrl = $this->getRequestUrl(array('code'=>null, 'state'=>null));
            if (!isset($redirectUrl)) throw new Exception("Unable to determine the redirect URL, please specify it.");
        }
        
        return $this->getUrl(self::authURL, array('client_id' => $this->appId, 'redirect_uri' => $redirectUrl, 'scope' => $scope, 'state' => $this->getUniqueState()));
    }
    
    /**
     * Handle an authentication response and sets the access token.
     * If $code and $state are omitted, they are taken from $_GET.
     * 
     * @param string $code   Returned code generated by Facebook.
     * @param string $state  Returned state generated by us; false means don't check state
     * @return object  { 'access_token': token, 'expires': seconds }
     */
    public function handleAuthResponse($code=null, $state=null)
    {
        if (!isset($code)) {
            if (isset($_GET['code'])) $code = $_GET['code'];
            if (isset($_GET['state'])) $state = $_GET['state'];
        }
        
        $redirectUrl = $this->getRequestUrl(array('code'=>null, 'state'=>null));
        
        if ($state !== false && $this->getUniqueState() != $state) {
            throw new Exception('Authentication response not accepted. IP mismatch, possible cross-site request forgery.');
        }
        
        $response = $this->request("oauth/access_token", array('client_id' => $this->appId, 'client_secret' => $this->apiSecret, 'redirect_uri' => $redirectUrl, 'code' => $code));
        parse_str($response, $data);
        if (reset($data) == '') $data = json_decode($response);

        if (!isset($data['access_token'])) throw new Exception("Did not receive the requested access token from Facebook" . (isset($data->error->message) ? ': ' . $data->error->message : ''));
        
        $this->setAccessToken($data['access_token']);
        return (object)$data;
    }
    
    /**
     * Check if a user is authenticated.
     * 
     * @return boolean
     */
    public function isAuth()
    {
        return isset($this->accessToken);
    }
    
    
    /**
     * Fetch raw data from facebook.
     * 
     * @param string $id
     * @param array  $params  Get parameters
     * @return array
     */
    public function fetchData($id, array $params=array())
    {
        $url = $id . ($item ? "/$item" : '');
        $response = $this->request($url, $params);

        $data = json_decode($response);
        if (isset($data['error'])) throw new Exception("Fetching '$url' from Facebook failed: " . $data['error']['message']);
        
        return $data;
    }

    /**
     * Fetch an entity (or other data) from Facebook.
     * 
     * @param string $id
     * @param array  $params
     * @return Entity
     */
    public function fetch($id, array $params=array())
    {
        $data = $this->fetchData($id, $params);

        if (!is_object($data)) return $data;
        
        // Todo check + impl autoexpanding array
        return new Entity($this, null, $data);
    }
    
    /**
     * Get current user profile.
     * Shortcut for $facebook->fetch('me')
     * 
     * @param array $params
     * @return Entity
     */
    public function me(array $params=array())
    {
        if (!$this->isAuth()) throw new Exception("There is no current user. Please set the access token.");
        
        $data = $this->fetchData('me', $params);
        return new Entity($this, 'user', $data);
    }
    
    /**
     * Create a new entity.
     * 
     * @param string $type
     * @param array  $data
     * @return Entity
     */
    public function create($type, $data=array())
    {
        return new Entity($this, $type, $data);
    }
}
