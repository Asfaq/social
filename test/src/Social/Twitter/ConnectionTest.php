<?php

namespace Social\Twitter;

require_once 'PHPUnit/Framework.php';

/**
 * Test class for Twitter\Connection.
 * Generated by PHPUnit on 2012-08-02 at 00:50:27.
 * 
 * Note: This class will do several tweets.
 */
class ConnectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var object
     */
    protected $cfg;

    /**
     * @var Connection
     */
    protected $connection;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->cfg = $GLOBALS['cfg']->twitter;
        $this->connection = new Connection($this->cfg->consumer_key, $this->cfg->consumer_secret, $this->cfg->access_token, $this->cfg->access_secret);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->connection = null;
    }
    
    /**
     * Test object creation.
     */
    public function testConstruct()
    {
        $this->assertAttributeEquals($this->cfg->consumer_key, 'consumerKey', $this->connection);
        $this->assertAttributeEquals($this->cfg->consumer_secret, 'consumerSecret', $this->connection);
        $this->assertAttributeEquals($this->cfg->access_token, 'accessToken', $this->connection);
        $this->assertAttributeEquals($this->cfg->access_secret, 'accessSecret', $this->connection);
    }

    /**
     * Test object creation with access information.
     */
    public function testConstruct_Access()
    {
        $twitter = new Connection('foo', 'bar', (object)array('token'=>'dog', 'secret'=>'fox'));
        
        $this->assertAttributeEquals('foo', 'consumerKey', $twitter);
        $this->assertAttributeEquals('bar', 'consumerSecret', $twitter);
        $this->assertAttributeEquals('dog', 'accessToken', $twitter);
        $this->assertAttributeEquals('fox', 'accessSecret', $twitter);
    }

    /**
     * Test object creation with Me entity.
     */
    public function testConstruct_WithMe()
    {
        $me = unserialize('O:17:"Social\\Twitter\\Me":3:{s:8:"' . "\0" . '*' . "\0" . '_type";s:2:"me";s:8:"' . "\0" . '*' . "\0" . '_stub";b:1;s:7:"user_id";i:12345;}');

        $twitter = new Connection('foo', 'bar', 'dog', 'fox', $me);
        $this->assertAttributeSame($me, 'me', $twitter);
        $this->assertAttributeSame($twitter, '_connection', $twitter->me());
    }
    
    /**
     * Test object creation with Me entity.
     */
    public function testConstruct_WithMeId()
    {
        $twitter = new Connection('foo', 'bar', 'dog', 'fox', 12345);
        
        $this->assertAttributeEquals(12345, 'user_id', $twitter->me());
        $this->assertAttributeEquals(true, '_stub', $twitter->me());
        $this->assertAttributeSame($twitter, '_connection', $twitter->me());
    }
    
    /**
     * Test asUser().
     * 
     * @depends testConstruct
     */
    public function testAsUser()
    {
        $twitter = $this->connection->asUser('test_access', 'test_secret');

        $this->assertAttributeEquals($this->cfg->consumer_key, 'consumerKey', $twitter);
        $this->assertAttributeEquals($this->cfg->consumer_secret, 'consumerSecret', $twitter);
        $this->assertAttributeEquals('test_access', 'accessToken', $twitter);
        $this->assertAttributeEquals('test_secret', 'accessSecret', $twitter);
    }

    /**
     * Test getConsumerKey().
     */
    public function testGetConsumerKey()
    {
        $this->assertEquals($this->cfg->consumer_key, $this->connection->getConsumerKey());
    }
    
    /**
     * Test getAccessToken().
     */
    public function testGetAccessToken()
    {
        $this->assertEquals($this->cfg->access_token, $this->connection->getAccessToken());
    }
    
    /**
     * Test getAccessSecret().
     */
    public function testGetAccessSecret()
    {
        $this->assertEquals($this->cfg->access_secret, $this->connection->getAccessSecret());
    }
    
    /**
     * Test getAccessInfo().
     */
    public function testGetAccessInfo()
    {
        $this->assertEquals((object)array('token' => $this->cfg->access_token, 'secret' => $this->cfg->access_secret), $this->connection->getAccessInfo());
    }
    
    /**
     * Test getBaseUrl().
     */
    public function testGetBaseUrl()
    {
        $method = new \ReflectionMethod($this->connection, 'getBaseUrl'); 
        $method->setAccessible(true);
 
        $this->assertEquals(Connection::restURL, $method->invoke($this->connection, 'statuses/home_timeline'));
        $this->assertEquals(Connection::restURL, $method->invoke($this->connection, 'statuses/home_timeline.json'));
        $this->assertEquals(Connection::restURL, $method->invoke($this->connection, 'statuses/destroy/12345.json'));
        
        $this->assertEquals(Connection::uploadURL, $method->invoke($this->connection, 'statuses/update_with_media'));
        
        $this->assertEquals(Connection::searchURL, $method->invoke($this->connection, 'search'));
        $this->assertEquals(Connection::searchURL, $method->invoke($this->connection, 'search.json'));
        $this->assertEquals(Connection::searchURL, $method->invoke($this->connection, 'search?q=#foo'));
        $this->assertEquals(Connection::searchURL, $method->invoke($this->connection, 'search.json?q=#foo'));
        $this->assertEquals(Connection::restURL, $method->invoke($this->connection, 'users/search'));

        $this->assertEquals(Connection::streamUrl, $method->invoke($this->connection, 'statuses/filter'));
        $this->assertEquals(Connection::streamUrl, $method->invoke($this->connection, 'statuses/sample'));
        $this->assertEquals(Connection::streamUrl, $method->invoke($this->connection, 'statuses/firehose'));
        
        $this->assertEquals(Connection::userstreamUrl, $method->invoke($this->connection, 'user'));
        $this->assertEquals(Connection::sitestreamUrl, $method->invoke($this->connection, 'site'));
    }
    
    /**
     * Test getCurrentUrl().
     */
    public function testGetCurrentUrl()
    {
        $_SERVER['HTTP_HOST'] = 'example.com';
        
        $_SERVER['REQUEST_URI'] = '';
        $this->assertEquals("http://example.com/", $this->connection->getCurrentUrl());
        $this->assertEquals("http://example.com/connect.php", $this->connection->getCurrentUrl('connect.php'));
        $this->assertEquals("http://example.com/connect.php?lion=cat", $this->connection->getCurrentUrl('connect.php', array('lion'=>'cat')));
        
        $_SERVER['REQUEST_URI'] = '?fox=dog&oauth_token=foo&oauth_verifier=bar';
        $this->assertEquals("http://example.com/?fox=dog", $this->connection->getCurrentUrl());
        $this->assertEquals("http://example.com/?fox=dog&lion=cat", $this->connection->getCurrentUrl(null, array('lion'=>'cat')));
    }

    /**
     * Test normalizeResource().
     */
    public function testNormalizeResource()
    {
        $this->assertEquals("foo/*/bar", $this->connection->normalizeResource('foo/12345/bar.json'));
        $this->assertEquals("dog/*/fox", $this->connection->normalizeResource('dog/:id/fox?a=b'));
    }

    /**
     * Test getDefaultParams().
     */
    public function testGetDefaultParams()
    {
        $this->assertEquals(array(), $this->connection->getDefaultParams('foo'));
        $this->assertEquals(array('count' => 200, 'include_entities' => true), $this->connection->getDefaultParams('statuses/home_timeline'));
    }

    /**
     * Test detectType().
     */
    public function testDetectType()
    {
        $this->assertEquals('tweet', $this->connection->detectType('statuses'));
        $this->assertEquals('tweet', $this->connection->detectType('statuses/12345'));
        $this->assertEquals('user', $this->connection->detectType('statuses/12345/retweeted_by'));
        $this->assertNull($this->connection->detectType('statuses/oembed'));
        $this->assertEquals('@user', $this->connection->detectType('friendships'));
    }

    /**
     * Test simple get().
     * 
     * @depends testConstruct
     */
    public function testGet()
    {
        $this->assertEquals('ok', $this->connection->get('help/test'));
    }

    /**
     * Test getting a tweet.
     * 
     * @depends testConstruct
     */
    public function testGet_Tweet()
    {
        $response = $this->connection->get('statuses/show/:id', array(':id' => '231230427510239232'), true);
        
        $this->assertEquals('231230427510239232', $response->id_str);
        $this->assertEquals('JasnyArnold', $response->user->screen_name);
        $this->assertEquals("Cool! You're testing #JasnySocialTwitterSearch", $response->text);
    }
    
    /**
     * Test posting a tweet.
     * 
     * @depends testConstruct
     */
    public function testPost_Tweet()
    {
        $text = "This is a test. #JasnySocialTest" . base_convert(uniqid(), 16, 36);
        $response = $this->connection->post("statuses/update", array('status'=>$text), false);
        
        $this->assertEquals($text, $response->text);
    }
    
    /**
     * @todo Implement testStream().
     */
    public function testStream()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMultiRequest().
     */
    public function testMultiRequest()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * Test search().
     * 
     * @depends testConstruct
     */
    public function testSearch()
    {
        $tag = "#JasnySocialTwitterSearch";
        $response = $this->connection->search($tag, array(), false);
                
        $this->assertEquals($tag, urldecode($response->query));
        $this->assertContains("#JasnySocialTwitterSearch", $response->results[0]->text);
    }

    /**
     * Test searchUsers().
     */
    public function testSearchUsers()
    {
        $response = $this->connection->searchUsers('JasnyArnold', array(), false);
        $this->assertEquals("89494775", $response[0]->id_str);
        $this->assertEquals("Jasny Test account", $response[0]->name);
    }

    /**
     * Test me().
     * 
     * The properties of Me are not fetched. @see Social\Twitter\MeTest for that.
     */
    public function testMe()
    {
        $this->assertType('Social\Twitter\Me', $this->connection->me());
        $this->assertAttributeSame($this->connection, '_connection', $this->connection->me());
        $this->assertAttributeEquals(true, '_stub', $this->connection->me());
    }

    /**
     * Test entity().
     */
    public function testEntity()
    {
        $this->assertType('Social\Twitter\Me', $this->connection->entity('me'));
        $this->assertType('Social\Twitter\User', $this->connection->entity('user'));
        $this->assertType('Social\Twitter\Tweet', $this->connection->entity('tweet'));
        $this->assertType('Social\Twitter\DirectMessage', $this->connection->entity('direct_message'));
        $this->assertType('Social\Twitter\UserList', $this->connection->entity('user_list'));
        $this->assertType('Social\Twitter\SavedSearch', $this->connection->entity('saved_search'));
        $this->assertType('Social\Twitter\Place', $this->connection->entity('place'));
    }

    /**
     * Test entity() more extensively
     */
    public function testEntity_User()
    {
        $user = $this->connection->entity('user');
        $this->assertAttributeSame($this->connection, '_connection', $user);
        $this->assertAttributeEquals(true, '_stub', $user);
        $this->assertObjectNotHasAttribute('user_id', $user);
        
        $user = $this->connection->entity('user', 12345);
        $this->assertAttributeSame($this->connection, '_connection', $user);
        $this->assertAttributeEquals(true, '_stub', $user);
        $this->assertAttributeEquals(12345, 'user_id', $user);
        
        $user = $this->connection->entity('user', array('user_id' => 12345, 'screen_name' => "FooBar"));
        $this->assertAttributeSame($this->connection, '_connection', $user);
        $this->assertAttributeEquals(true, '_stub', $user);
        $this->assertAttributeEquals(12345, 'user_id', $user);
        $this->assertAttributeEquals("FooBar", 'screen_name', $user);
        
        $this->assertAttributeEquals(false, '_stub', $this->connection->entity('user', array('user_id' => 12345, 'screen_name' => "FooBar"), false));
        $this->assertAttributeEquals(true, '_stub', $this->connection->entity('@user', array('user_id' => 12345, 'screen_name' => "FooBar"), false));
    }
    
    /**
     * Test collection().
     * 
     * @see Social\Twitter\CollectionTest for more collection tests.
     */
    public function testCollection()
    {
        $collection = $this->connection->collection('user');
        
        $this->assertType('Social\Twitter\Collection', $collection);
        $this->assertSame($this->connection, $collection->getConnection());
        $this->assertSame('user', $collection->getType());
    }
    
    /**
     * Test user().
     * 
     * @see Social\Twitter\CollectionTest for more user tests.
     */
    public function testUser()
    {
        $user = $this->connection->user(12345);
        $this->assertType('Social\Twitter\User', $user);
        $this->assertAttributeSame($this->connection, '_connection', $user);
        $this->assertAttributeEquals(true, '_stub', $user);
        $this->assertAttributeEquals(12345, 'user_id', $user);

        $user = $this->connection->user(array('user_id' => 12345, 'screen_name' => "FooBar"), false);
        $this->assertType('Social\Twitter\User', $user);
        $this->assertAttributeSame($this->connection, '_connection', $user);
        $this->assertAttributeEquals(false, '_stub', $user);
        $this->assertAttributeEquals(12345, 'user_id', $user);
        $this->assertAttributeEquals("FooBar", 'screen_name', $user);
    }

    /**
     * Test convertData().
     */
    public function testConvertData()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement test__sleep().
     */
    public function test__sleep()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
